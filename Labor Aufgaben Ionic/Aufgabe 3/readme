Als erstes wird ein neues Projekt angelegt das Tabs besitzt.

	sudo ionic start todomanager tabs --v2

Nach dem es erstellt und die rechte angepasst wurden, kann der Test Server wieder gestartet werden.
Nun ändern wir als erstes die Tabs.
Dazu wird Contact und alle TabIcon entfernt.

Home zu Task Liste 
About zu Add Task

In der ts Datei wird nun alles was mit Contact zu tun hat entfernt.
Bislang waren die Tabs unten, nun sollen sie oben angezeigt werden.
Dazu wird in der app.module.ts folgender Eintrag angepasst. 
IonicModule.forRoot(MyApp, {tabsPlacement:'top'})
Außerdem soll die Headerleiste Fest sein.
Dazu wird in der app.html folgede anpassung gemacht 

	<ion-header><ion-navbar>
		<ion-title>TODOS</ion-title>
	</ion-navbar></ion-header>

Als nächstes kümmern wir uns um die eingabe von Tasks
Dazu wird der “about” Ordner genommen. Dieser kann gerne umgeschrieben werden. Wichtig alle Verweise auf den Ordner dann auch.
Nach dem wir minimal aber “About “zu  “Add Task” umgeändert haben, soll eine Eingabe Feld und eine Auswahl eingebaut werden, die über einen Button gespeichert wird.
Der Auswahl wird mittels ion-select und ion-option realisiert und beinhaltet folgende Values:
Other, Shopping, Study, Work, Reminder
Um die Funktionalität zu erweitert habt ihr sicherlich schon, aus Aufgabe 2 den Button und die entsprechende Variablen definiert.
Für eine zusätzliche Ausgabe wird nun ein Toast genutzt.
Um Toast zu nutzen braucht es den Import

	import { ToastController } from 'ionic-angular';

und den Konstruktor zusatz. 

	constructor(public navCtrl: NavController,public toastCtrl: ToastController){}

Um euch die zeit zu ersparen haben wir hier eine funktion die ihr nutzten könnt um einen Toast zu senden 

	sendToast(msg) {
	  let toast = this.toastCtrl.create({message: msg,duration: 5000});
	  toast.present();
 	}

der Parameter msg ist dann die Ausgabe 
Wenn jetzt also der Titel leer ist dann soll eine entsprechende Meldung kommen wenn nicht dann “TODO added “ + Titel
Nun soll der Eintrag auch gespeichert werden, dazu wird Storage genommen. http://ionicframework.com/docs/storage/
Um Storage zu nuntzen brach es wieder einen Import
 
	import { Storage } from '@ionic/storage';

und den entsprechenden Konstruktor zusatz.

	ToastController, private storage: Storage) 

Achtung es geht nur wenn die Storage Variable auf private gesetzt wird.
Zustalich muss in der app.module.ts zwei weiter Anpassungen gemacht werden. 

	import { IonicStorageModule } from '@ionic/storage';

und bei “imports” den Eintrag.

	IonicStorageModule.forRoot()

Um die Todos richtig zu speichern wird das Dictionary aus der Vorlesung gebracht.
Beim Speichern wird eine interne nummer hochgezählt und das Dictionary als JSON in einem entsprechenden Key gespeichert.
Nun habe wir die Todos gespeichert, möchten sie aber auch anzeige.
Dazu wird der “home” Ordner genommen. Dieser kann gerne umgeschrieben werden. Wichtig alle Verweise auf den Ordner dann auch.
Nach dem wir minimal aber “Home “zu  “Task List” umgeändert haben, soll eine Liste erzeugt werden die checkboxen enthält.

	<ion-list>
		<ion-item *ngFor="let todo of todos">
		  <ion-label> {{ todo.id }} {{ todo.title }} ({{todo.category}})</ion-label>
		  <ion-checkbox (click)="delete(todo.id);"></ion-checkbox>
		</ion-item>
	  </ion-list>

Dann muss Storage wie in Teil 2 implementiert werden.
Hier der restliche code

  ionViewWillEnter() {
    this.refresh();
  }

  refresh() {
    this.todos = [];
    this.storage.get('todos').then((val) => {
      var temp_todos: Array<{ id: number, title: string, category: string }> = [];
      temp_todos = JSON.parse(val);
      for (let i = 0; i < temp_todos.length; i++) {
        var todo = temp_todos[i];
        this.todos.push(todo);
      }
    });
  }

  delete(id) {
    var temp_todos: Array<{ id: number, title: string, category: string }> = [];
    for (let i = 0; i < this.todos.length; i++) {
      var todo = this.todos[i];
      if (todo.id !== id) {
        temp_todos.push(todo);
      }
      else {
        this.sendToast("TODO finish " + todo.title);
      }
    }
    this.todos = temp_todos;
    this.storage.ready().then(() => {
      this.storage.set('todos', JSON.stringify(this.todos));
    });
  }

